-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[s, w], stmt) {
  case stmt of 
    Assn (x, e) -> [s <- [x, evalExpr(s, e)], w] | 
    Seq (s1, s2) -> eval(eval(c, s1), s2) | 
    Skip -> c | 
    Read (v) ->
        case readWorld(w) of
            [n, w] -> [s <- [v, n], w]
        esac | 
    Write (e) -> [s, writeWorld(evalExpr(s, e), w)] |
    If (e, branchT, branchF) -> if evalExpr (s, e) != 0 then eval (c, branchT) else eval (c, branchF) fi |
    While (e, body) -> if evalExpr (s, e) != 0 then eval (eval (c, body), stmt) else c fi |
    DoWhile (body, e) -> case eval (c, body) of nc@[ns, _] -> if evalExpr (ns, e) != 0 then eval (nc, stmt) else nc fi esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
