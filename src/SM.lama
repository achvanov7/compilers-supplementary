-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, state, world], insns) {
  case insns of head:tail ->
    case head of
      READ -> case readWorld(world) of
        [n, newWorld] -> eval([n:stack, state, newWorld], tail)
      esac |
      WRITE -> case stack of
        val:tailstack -> eval([tailstack, state, writeWorld(n, world)], tail)
      esac |
      BINOP(oper) -> case stack of
        y:x:tailstack -> eval([evalExpr(emptyState, Binop(oper, Const(x), Const(y))):tailstack, state, world], tail)
      esac |
      LD(x) -> eval([state(x):stack, state, world], tail) |
      ST(x) -> case stack of 
        val:tailstack -> eval([tailstack, state <- [x, val], world], tail)
      esac |
      CONST(c) -> eval([c:stack, state, world], tail)
    esac |
    _ -> c
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var(var) -> {LD(var)} |
    Const(c) -> {CONST(c)} |
    Binop(oper, x, y) -> compileExpr(x) +++ compileExpr(y) +++ {BINOP(oper)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn(x, e) -> compileExpr(e) +++ {ST(x)} |
    Seg(s1, s2) -> compileSM(s1) +++ compileSM(s2) |
    Skip -> {} |
    Read(v) -> {READ} +++ {ST(v)} |
    Write(e) -> compileExpr(e) ++ {WRITE}
  esac
}
