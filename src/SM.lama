-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[stack, ctrlStack, state, world], insns) {
    case insns of
      {} -> c
    | CONST (x) : tail -> eval ([x : stack, ctrlStack, state, world], tail)
    | LD (v) : tail -> eval ([lookup (state, v) : stack, ctrlStack, state, world], tail)
    | ST (v) : tail -> state.assign (v, stack.hd); eval(c, tail)
    | WRITE : tail -> eval ([stack.tl, ctrlStack, state, writeWorld (stack.hd, world)], tail)
    | BINOP (op) : tail -> case stack of y : x : stail -> 
                            eval ([evalOp (op, x, y) : stail, ctrlStack, state, world], tail)
                          esac
    | READ : tail -> case readWorld (world) of [v, newWorld] -> 
                      eval ([v : stack, ctrlStack, state, newWorld], tail)
                    esac
    | LABEL (_) : tail -> eval (c, tail)
    | JMP (l) : tail -> eval (c, fromLabel (env, l))
    | CJMP ("Z", l) : tail -> eval ([stack.tl, ctrlStack, state, world], if stack.hd == 0 then env.fromLabel (l) else tail fi)
    | CJMP ("NZ", l) : tail -> eval ([stack.tl, ctrlStack, state, world], if stack.hd != 0 then env.fromLabel (l) else tail fi)
    | DROP : tail -> eval ([stack.tl, ctrlStack, state, world], tail)
    | STI : tail -> case stack of v : refx : stail -> 
                      assign (state, refx, v); eval ([v : stail, ctrlStack, state, world], tail)
                    esac
    | LDA (x) : tail -> eval ([x : stack, ctrlStack, state, world], tail)
    | DUP : tail -> eval ([stack.hd : stack.hd : stack.tl, ctrlStack, state, world], tail)
    | GLOBAL (x) : tail -> assign (state, Glb (x), 0); eval (c, tail)
    | CALL (funLabel, argAmount) : tail -> eval ([stack, [state, tail]:ctrlStack, state, world], fromLabel (env, funLabel))
    | BEGIN (f, argAmount, locs) : tail -> case take (stack, argAmount) of
        [stack, args] -> case foldl (fun ([state, argAmount], arg) {state.assign (Arg (argAmount), arg); [state, argAmount + 1]}, [makeState (argAmount, locs), 0], args) of
          [state, _] -> eval ([stack, ctrlStack, state, world], tail)
        esac
      esac
    | END : tail -> case ctrlStack of
        {} -> c |
        [state, tail] : ctrlStack -> eval([stack, ctrlStack, state, world], tail)
      esac
  esac
}

  (* End *)

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for code generation:
--    a. generate the code for the topmost expression (the program itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

fun addDefs (env, defs) {
  foldl (
    fun ([env, funs, globalDefs], def) {
      case def of
        Fun (name, args, body) ->
          case genFunLabel (env, name) of
            [fLabel, env] -> [addFun (env, name, fLabel, args.size), [fLabel, args, body] : funs, globalDefs]
          esac |
        Var (vars) ->
          [
            addVars (env, vars),
            funs,
            if env.isGlobal
            then foldl (fun (globals, name) {globals <+ GLOBAL (name)}, globalDefs, vars)
            else globalDefs
            fi
          ]
      esac
    }, [beginScope (env), {}, emptyBuffer ()], defs
  )
}

fun rememberFuns (env, funs) {
  foldl (
    fun (env, [fLabel, args, body]) {
      rememberFun (env, fLabel, args, body)
    }, env, funs
  )
}

public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVar(env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar(env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Binop (op, l, r) ->
        case env.genLabels (2) of [afterL, afterR, env] ->
          case compile (afterL, env, l) of [usedAfterL, env, codeL] ->
            case compile (afterR, env, r) of [usedAfterR, env, codeR] ->
              [false, env, codeL <+> label (afterL, usedAfterL) <+> codeR <+> label (afterR, usedAfterR) <+ BINOP (op)]
            esac
          esac
        esac
    | Assn (x, e) ->
        case env.genLabels (2) of [afterX, afterE, env] ->
          case compile (afterX, env, x) of [usedAfterX, env, codeX] ->
            case compile (afterE, env, e) of [usedAfterE, env, codeE] ->
              [false, env, codeX <+> label (afterX, usedAfterX) <+> codeE <+> label (afterE, usedAfterE) <+ STI]
            esac
          esac
        esac
    | Read (x) -> [false, env, singletonBuffer (READ) <+ ST (lookupVar(env, x)) <+ DROP]
    | Write (e) -> 
        case env.genLabel of [afterE, env] ->
          case compile (afterE, env, e) of
            [usedAfterE, env, codeE] -> [false, env, codeE <+> label (afterE, usedAfterE) <+ WRITE]
          esac
        esac
    | Seq (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | Ignore (e) ->
        case env.genLabel of [afterE, env] ->
          case compile (afterE, env, e) of
            [usedAfterE, env, codeE] -> [false, env, codeE <+> label (afterE, usedAfterE) <+ DROP]
          esac
        esac
    | If (e, branchT, branchF) ->
        case env.genLabels (3) of [afterExprLabel, afterTrueLabel, beforeFalseLabel, env] ->
          case compile (afterExprLabel, env, e) of [afterExprUsed, env, codeExpr] ->
            case compile (afterTrueLabel, env, branchT) of [afterTrueUsed, env, codeTrue] ->
              case compile (lab, env, branchF) of [_, env, codeFalse] ->
                [true, env, codeExpr <+> label (afterExprLabel, afterExprUsed) <+ CJMP ("Z", beforeFalseLabel) <+> codeTrue <+> label (afterTrueLabel, afterTrueUsed) <+ JMP (lab) <+> label (beforeFalseLabel, true) <+> codeFalse]
              esac
            esac
          esac
        esac
    | While (e, s) ->
        case env.genLabels (3) of [stmtLabel, exprLabel, exprLabelAfter, env] ->
          case compile (exprLabel, env, s) of [exprLabelUsed, env, codeStmt] ->
            case compile (exprLabelAfter, env, e) of [exprAfterUsed, env, codeExpr] ->
              [false, env, singletonBuffer (JMP (exprLabel)) <+> label (stmtLabel, true) <+> codeStmt <+> label (exprLabel, true) <+> codeExpr <+> label (exprLabelAfter, exprAfterUsed) <+ CJMP ("NZ", stmtLabel)]
            esac
          esac
        esac
    | DoWhile (s, e) ->
        case env.genLabels (3) of [stmtLabel, stmtLabelAfter, exprLabel, env] ->
          case compile (stmtLabelAfter, env, s) of [stmtLabelUsed, env, codeStmt] ->
            case compile (exprLabel, env, e) of [exprLabelUsed, env, codeExpr] ->
              [false, env, label (stmtLabel, true) <+> codeStmt <+> label (stmtLabelAfter, stmtLabelUsed) <+> codeExpr <+> label (exprLabel, exprLabelUsed) <+ CJMP ("NZ", stmtLabel)]
            esac
          esac
        esac
    | Scope (defs, body) ->
        case addDefs (env, defs) of [env, funs, globalDefs] ->
          case compile (lab, rememberFuns (env, funs), body) of [flag, env, code] ->
            [flag, endScope (env), globalDefs <+> code]
          esac
        esac
    | Call (name, args) ->
        case env.genLabel of [l, env] ->
          case compile (l, env, foldl (fun (code, arg) { Seq (code, arg)}, Skip, args)) of [used, env, argsCode] ->
            case lookupFun (env, name) of Fun (fLabel, nArgs) ->
              [false, env, argsCode <+> label (l, used) <+ CALL (fLabel, nArgs)]
            esac
          esac
        esac
    | _                 ->  failure ("compileSM not implemented\n")
    esac
  }

  fun compileFun (env, f@Fun(fLabel, args, body, state)) {
    case genLabel (addArgs (beginFun (env, state), args)) of [lbl, env] ->
      case compile (lbl, env, body) of [lblUsed, env, code] ->
        [env, singletonBuffer (LABEL (fLabel)) <+ BEGIN (fLabel, args.size, getLocals (env)) <+> code <+> label (lbl, lblUsed) <+ END]
      esac
    esac
  }

  fun compileFuns (env) {
    case getFuns (env) of 
      [{}, env] -> emptyBuffer() |
      [funcs, env] -> case foldl (fun ([env, code], f) {
          case compileFun (env, f) of
            [env, fCode] -> [env, code <+> fCode]
          esac
        }, [env, emptyBuffer ()], funcs) of [env, code] ->
              code <+> compileFuns (env)
        esac
    esac
  }

  case genLabel (initCompEnv ()) of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, env, code] -> getBuffer $ singletonBuffer (LABEL ("main")) <+ BEGIN ("main", 0, getLocals (env)) 
                                    <+> code <+> label (endLab, endLabUsed) <+ END <+> compileFuns (env)
       esac
  esac
}

